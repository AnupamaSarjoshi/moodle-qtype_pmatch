{"version":3,"file":"populate_placeholder.min.js","sources":["../src/populate_placeholder.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n *\n * @module    qtype_pmatch\n * @class     populate_placeholder\n * @copyright 2024 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Modifies the length in a placeholder string.\n *\n * @param {string} originalPlaceholder Original placeholder string.\n * @param {number} newLength New length to replace in the placeholder.\n * @return {string} Placeholder string with the new length.\n */\nfunction modifyLengthInPlaceholder(originalPlaceholder, newLength) {\n    // This regex matches the model answer placeholder format to 4 groups:\n    // 1. The underscores at the start of the string.\n    // 2. The length of the placeholder.\n    // 3. Optional 'x' followed by a number.\n    // 4. The underscores at the end of the string.\n    const regex = /(_+)?(\\d+)(x+\\d+)?(_+)?/;\n    return originalPlaceholder.replace(regex, `$1${newLength}$3$4`);\n}\n\n/**\n * Get the length of the text without <sub>, </sub>, <sup>, </sup> tags.\n *\n * @param {string} text The text to get the length of.\n * @returns {number} The length of the text without the tags.\n */\nfunction getLengthWithoutSubSupTags(text) {\n    // Remove only <sub>, </sub>, <sup>, </sup> tags from the string.\n    let textWithoutHtml = text.replace(/<\\/?sub>|<\\/?sup>/g, '');\n    // Remove the trailing whitespace.\n    textWithoutHtml = textWithoutHtml.trimEnd();\n    return textWithoutHtml.length + 2;\n}\n\n/**\n * Update the placeholder values based on the model answer input.\n *\n * @param {HTMLElement} modelAnswer The model answer input element.\n * @param {array} placeholderInputs An array of placeholder input elements.\n * @param {array} originalPlaceholders An array of original placeholder values.\n */\nfunction updatePlaceholders(modelAnswer, placeholderInputs, originalPlaceholders) {\n    const modelAnswerLength = getLengthWithoutSubSupTags(modelAnswer.value);\n\n    placeholderInputs.forEach((input, index) => {\n        if (/^_+$/.test(originalPlaceholders[index])) {\n            input.value = \"_\".repeat(modelAnswerLength);\n        } else {\n            input.value = modifyLengthInPlaceholder(originalPlaceholders[index], modelAnswerLength);\n        }\n    });\n}\n\n/**\n * Reset the placeholder values to the original values.\n *\n * @param {array} placeholderInputs An array of placeholder input elements.\n * @param {array} originalPlaceholders An array of original placeholder values.\n */\nfunction resetPlaceholders(placeholderInputs, originalPlaceholders) {\n    placeholderInputs.forEach((input, index) => {\n        input.value = originalPlaceholders[index];\n    });\n}\n\n/**\n * Sync possible answer placeholders with model input in pmatch question type.\n *\n * @param {string} fieldNamePrefix The prefix of the field name.\n */\nexport const init = (fieldNamePrefix) => {\n    const modelAnswer = document.querySelector('[name=\"' + fieldNamePrefix + 'modelanswer\"]');\n    const placeholderInputs = document.querySelectorAll('[name=\"' + fieldNamePrefix + 'placeholder\"]');\n    const originalPlaceholders = Array.from(placeholderInputs, input => input.value);\n\n    if (modelAnswer.value.length !== 0) {\n        updatePlaceholders(modelAnswer, placeholderInputs, originalPlaceholders);\n    }\n\n    modelAnswer.addEventListener('keyup', () => {\n        // The placeholders should update when it is not empty, and it not contains only white space.\n        if (modelAnswer.value.length > 0 && !/^\\s*$/.test(modelAnswer.value)) {\n            updatePlaceholders(modelAnswer, placeholderInputs, originalPlaceholders);\n        } else {\n            resetPlaceholders(placeholderInputs, originalPlaceholders);\n        }\n    });\n};\n"],"names":["updatePlaceholders","modelAnswer","placeholderInputs","originalPlaceholders","modelAnswerLength","text","textWithoutHtml","replace","trimEnd","length","getLengthWithoutSubSupTags","value","forEach","input","index","originalPlaceholder","newLength","test","repeat","fieldNamePrefix","document","querySelector","querySelectorAll","Array","from","addEventListener","resetPlaceholders"],"mappings":"oFA4DSA,mBAAmBC,YAAaC,kBAAmBC,4BAClDC,2BAhB0BC,UAE5BC,gBAAkBD,KAAKE,QAAQ,qBAAsB,WAEzDD,gBAAkBA,gBAAgBE,UAC3BF,gBAAgBG,OAAS,EAWNC,CAA2BT,YAAYU,OAEjET,kBAAkBU,SAAQ,CAACC,MAAOC;;;;;;;;;;;;;;;;;;;;;;IAlCHC,oBAAqBC,UAmC5C,OAAOC,KAAKd,qBAAqBW,QACjCD,MAAMF,MAAQ,IAAIO,OAAOd,mBAEzBS,MAAMF,OAtCiBI,oBAsCiBZ,qBAAqBW,OAtCjBE,UAsCyBZ,kBA/BtEW,oBAAoBR,QADb,sCACiCS,kHAqD9BG,wBACXlB,YAAcmB,SAASC,cAAc,UAAYF,gBAAkB,iBACnEjB,kBAAoBkB,SAASE,iBAAiB,UAAYH,gBAAkB,iBAC5EhB,qBAAuBoB,MAAMC,KAAKtB,mBAAmBW,OAASA,MAAMF,QAEzC,IAA7BV,YAAYU,MAAMF,QAClBT,mBAAmBC,YAAaC,kBAAmBC,sBAGvDF,YAAYwB,iBAAiB,SAAS,KAE9BxB,YAAYU,MAAMF,OAAS,IAAM,QAAQQ,KAAKhB,YAAYU,OAC1DX,mBAAmBC,YAAaC,kBAAmBC,+BAvBpCD,kBAAmBC,sBAC1CD,kBAAkBU,SAAQ,CAACC,MAAOC,SAC9BD,MAAMF,MAAQR,qBAAqBW,UAuB/BY,CAAkBxB,kBAAmBC"}